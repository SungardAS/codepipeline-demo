AWSTemplateFormatVersion: "2010-09-09"
Description: Create Lambda Function to Test App Post Deployment

Parameters:
  FunctionName:
    Type: String
  PublicIp:
    Type: String
    Default: '1.1.1.1'

Resources:
  LambdaTest:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      FunctionName: !Ref FunctionName
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 20
      Runtime: nodejs4.3
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          var assert = require('assert');
          var AWS = require('aws-sdk');
          var http = require('http');
          exports.handler = function(event, context) {
              var codepipeline = new AWS.CodePipeline();
              // Retrieve the Job ID from the Lambda action
              var jobId = event["CodePipeline.job"].id;
              // Retrieve the value of UserParameters from the Lambda action configuration in AWS CodePipeline, in this case a URL which will be
              // health checked by this function.
              // var url = event["CodePipeline.job"].data.actionConfiguration.configuration.UserParameters;
              var url = "http://${PublicIp}"
              // Notify AWS CodePipeline of a successful job
              var putJobSuccess = function(message) {
                  var params = {
                      jobId: jobId
                  };
                  codepipeline.putJobSuccessResult(params, function(err, data) {
                      if(err) {
                          context.fail(err);
                      } else {
                          context.succeed(message);
                      }
                  });
              };
              // Notify AWS CodePipeline of a failed job
              var putJobFailure = function(message) {
                  var params = {
                      jobId: jobId,
                      failureDetails: {
                          message: JSON.stringify(message),
                          type: 'JobFailed',
                          externalExecutionId: context.invokeid
                      }
                  };
                  codepipeline.putJobFailureResult(params, function(err, data) {
                      context.fail(message);
                  });
              };
              // Validate the URL passed in UserParameters
              if(!url || url.indexOf('http://') === -1) {
                  //putJobFailure('The UserParameters field must contain a valid URL address to test, including http:// or https://');
                  putJobFailure('The PublicIp Parameter must contain a valid URL address to test, including http:// or https://');
                  return;
              }
              // Helper function to make a HTTP GET request to the page.
              // The helper will test the response and succeed or fail the job accordingly
              var getPage = function(url, callback) {
                  var pageObject = {
                      body: '',
                      statusCode: 0,
                      contains: function(search) {
                          return this.body.indexOf(search) > -1;
                      }
                  };
                  http.get(url, function(response) {
                      pageObject.body = '';
                      pageObject.statusCode = response.statusCode;
                      response.on('data', function (chunk) {
                          pageObject.body += chunk;
                      });
                      response.on('end', function () {
                          callback(pageObject);
                      });
                      response.resume();
                  }).on('error', function(error) {
                      // Fail the job if our request failed
                      putJobFailure(error);
                  });
              };
              getPage(url, function(returnedPage) {
                  try {
                      // Check if the HTTP response has a 200 status
                      assert(returnedPage.statusCode === 200);
                      // Check if the page contains the text "Congratulations"
                      // You can change this to check for different text, or add other tests as required
                      assert(returnedPage.contains('Bespoke'));
                      // Succeed the job
                      putJobSuccess("Tests passed.");
                  } catch (ex) {
                      // If any of the assertions failed then fail the job
                      putJobFailure(ex);
                  }
              });
          };

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /

  LambdaRolePolicies:
    Type: AWS::IAM::Policy
    DependsOn: LambdaRole
    Properties:
      PolicyName: LambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action: ['ec2:Describe*']
            Resource: "*"
          - Effect: Allow
            Action: 'logs:*'
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - codepipeline:PutJobSuccessResult
              - codepipeline:PutJobFailureResult
            Resource: ["*"]
      Roles: [ !Ref LambdaRole ]


