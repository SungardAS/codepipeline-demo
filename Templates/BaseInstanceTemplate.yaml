AWSTemplateFormatVersion: "2010-09-09"
Description: >
  'Create instances ready for CodeDeploy: Create up to 3 Amazon EC2 instances with an associated instance profile and install the AWS CodeDeploy Agent. **WARNING** This template creates one or more Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template.'

Parameters:
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  KeyPairName:
    Description: Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.
    Type: String
    MinLength: "1"
    MaxLength: "255"
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII characters.
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t1.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  InstanceCount:
    Description: Number of Amazon EC2 instances (Must be a number between 1 and 3).
    Type: Number
    Default: 1
    ConstraintDescription: Must be a number between 1 and 3.
    MinValue: 1
    MaxValue: 3
  SSHLocation:
    Description: The IP address range that can be used to connect using SSH or RDP to the Amazon EC2 instances.
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: "0.0.0.0/0"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  AMI:
    Type: String
    Default: ami-246ed34c

Conditions:
  LaunchLinuxEC2Instance2:
    !Equals ["2", !Ref InstanceCount ]
  LaunchLinuxEC2Instance3:
    !Equals ["3", !Ref InstanceCount ]

Resources:
  LinuxEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: true
              ensureRunning: true
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum update -y aws-cfn-bootstrap
          yum install -y aws-cli

          # Install the AWS CodeDeploy Agent.
          cd /home/ec2-user/
          aws s3 cp s3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm . || error_exit 'Failed to download AWS CodeDeploy Agent.'
          yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LinuxEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init.'
          # All is well, so signal success.
          /opt/aws/bin/cfn-signal -e $? -r "AWS CodeDeploy Agent setup complete." '${WaitHandle}'
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: !Ref InstanceCount
      Handle: !Ref WaitHandle
      Timeout: "900"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  LinuxEC2Instance2:
    Type: AWS::EC2::Instance
    Condition: LaunchLinuxEC2Instance2
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: true
              ensureRunning: true
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum update -y aws-cfn-bootstrap
          yum install -y aws-cli

          # Install the AWS CodeDeploy Agent.
          cd /home/ec2-user/
          aws s3 cp s3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm . || error_exit 'Failed to download AWS CodeDeploy Agent.'
          yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LinuxEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init.'
          # All is well, so signal success.
          /opt/aws/bin/cfn-signal -e $? -r "AWS CodeDeploy Agent setup complete." '${WaitHandle}'
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile

  LinuxEC2Instance3:
    Type: AWS::EC2::Instance
    Condition: LaunchLinuxEC2Instance3
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: true
              ensureRunning: true
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum update -y aws-cfn-bootstrap
          yum install -y aws-cli
          # Helper function.
          function error_exit
          {
            /opt/aws/bin/cfn-signal -e 1 -r "$1" ${WaitHandle}
            exit 1
          }
          # Install the AWS CodeDeploy Agent.
          cd /home/ec2-user/
          aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'
          yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.'
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LinuxEC2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init.'
          # All is well, so signal success.
          /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup complete." ${WaitHandle}
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile


  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
          - Effect: Allow
            Resource: "*"
            Action:
              - autoscaling:CompleteLifecycleAction
              - autoscaling:DeleteLifecycleHook
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:PutLifecycleHook
              - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
        - !Ref CodeDeployTrustRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - codedeploy:*
              - autoscaling:Describe*
              - cloudformation:Describe*
              - cloudformation:GetTemplate
              - s3:Get*
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref InstanceRole

Outputs:
  CodeDeployTrustRoleARN:
    Value: !GetAtt CodeDeployTrustRole.Arn

  PublicIp:
    Value: !GetAtt LinuxEC2Instance.PublicIp

